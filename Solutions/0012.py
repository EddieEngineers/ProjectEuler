# The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1
# + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
#
# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
#
# Let us list the factors of the first seven triangle numbers:
#
#  1: 1
#  3: 1,3
#  6: 1,2,3,6
# 10: 1,2,5,10
# 15: 1,3,5,15
# 21: 1,3,7,21
# 28: 1,2,4,7,14,28
# We can see that 28 is the first triangle number to have over five divisors.
#
# What is the value of the first triangle number to have over five hundred divisors?
import sys
from numba import njit
from typing import List


@njit()
def ceil_div(a, b) -> int:
    return -(a // -b)


@njit()
def get_divisors(n: int) -> List[int]:
    numbers = [n]
    for i in range(1, ceil_div(n, 2)):
        if n % i == 0:
            numbers.append(i)

    return numbers


@njit()
def get_triangle_number(n: int) -> int:
    return sum(list(range(n + 1)))


@njit
def solve(divisors_len_limit) -> int:
    for i in range(1, sys.maxsize):
        triangle_number = get_triangle_number(i)
        divisors = get_divisors(triangle_number)
        if len(divisors) >= divisors_len_limit:
            return triangle_number


if __name__ == '__main__':
    assert (ceil_div(5, 2) == 3)
    assert (get_triangle_number(7) == 28)
    assert (len(get_divisors(get_triangle_number(7))) == 5)
    assert (solve(5))

    print(solve(500))
